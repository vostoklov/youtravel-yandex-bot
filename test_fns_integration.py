#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –§–ù–° API
"""
import asyncio
import logging
import sys
from fns_api import FNSAPI, validate_inn_with_fns, get_company_by_inn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_fns_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ù–° API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –§–ù–° API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ò–ù–ù
    test_inns = [
        "1234567890",  # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏)
        "7707083893",  # –†–µ–∞–ª—å–Ω—ã–π –ò–ù–ù –Ø–Ω–¥–µ–∫—Å–∞
        "123456789012",  # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù –ò–ü
        "invalid_inn",  # –ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù
        "123",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ò–ù–ù
    ]
    
    async with FNSAPI() as fns_api:
        for inn in test_inns:
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ù–ù: {inn}")
            print("-" * 30)
            
            try:
                # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                validation_result = await fns_api.validate_inn(inn)
                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation_result}")
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
                if validation_result.get('valid', False):
                    company_info = await fns_api.get_company_info(inn)
                    print(f"üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏: {company_info}")
                else:
                    print(f"‚ùå –ò–ù–ù –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ù–ù {inn}: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def test_utils_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å utils"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å utils")
    print("=" * 50)
    
    from utils import validate_inn_with_fns
    
    test_inns = [
        "1234567890",  # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ù–ù
        "7707083893",  # –†–µ–∞–ª—å–Ω—ã–π –ò–ù–ù
        "invalid",     # –ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù
    ]
    
    for inn in test_inns:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ utils –¥–ª—è –ò–ù–ù: {inn}")
        print("-" * 30)
        
        try:
            result = await validate_inn_with_fns(inn)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ utils –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def test_mock_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    test_inns = [
        "1234567890",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å
        "123456789012",  # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å
        "9876543210",  # –ù–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏—Å—å
    ]
    
    async with FNSAPI() as fns_api:
        for inn in test_inns:
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ù–ù: {inn}")
            print("-" * 30)
            
            try:
                company_info = await fns_api._get_mock_company_info(inn)
                print(f"üè¢ –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ: {company_info}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –§–ù–° API")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ API
        await test_fns_api()
        
        # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å utils
        await test_utils_integration()
        
        # –¢–µ—Å—Ç 3: –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ
        await test_mock_data()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
