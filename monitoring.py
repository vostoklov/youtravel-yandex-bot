"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any
import config
from database import db
from sheets import sheets

logger = logging.getLogger(__name__)

class MonitoringSystem:
    def __init__(self):
        self.last_check = None
        self.alert_thresholds = {
            'low_promos': 5,  # –ú–∏–Ω–∏–º—É–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            'high_error_rate': 10,  # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –≤ —á–∞—Å
            'low_conversion': 20,  # –ú–∏–Ω–∏–º—É–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ %
        }
    
    async def check_system_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_status = {
            'timestamp': datetime.now(),
            'database': False,
            'google_sheets': False,
            'promo_codes': 0,
            'errors': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db.get_stats()
            health_status['database'] = True
        except Exception as e:
            health_status['errors'].append(f"Database error: {e}")
            logger.error(f"Database health check failed: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
            promo_codes = sheets.get_available_promo_codes()
            health_status['google_sheets'] = True
            health_status['promo_codes'] = len(promo_codes)
        except Exception as e:
            health_status['errors'].append(f"Google Sheets error: {e}")
            logger.error(f"Google Sheets health check failed: {e}")
        
        return health_status
    
    async def check_metrics(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            stats = await db.get_detailed_stats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
            available_promos = sheets.get_available_promo_codes()
            stats['available_promos'] = len(available_promos)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            alerts = []
            
            if stats['available_promos'] < self.alert_thresholds['low_promos']:
                alerts.append(f"‚ö†Ô∏è –ú–∞–ª–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['available_promos']}")
            
            if stats['conversion_rate'] < self.alert_thresholds['low_conversion']:
                alerts.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']:.1f}%")
            
            return {
                'stats': stats,
                'alerts': alerts,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"Metrics check failed: {e}")
            return {
                'stats': {},
                'alerts': [f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}"],
                'timestamp': datetime.now()
            }
    
    async def send_daily_report(self, bot) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º"""
        try:
            metrics = await self.check_metrics()
            health = await self.check_system_health()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._format_daily_report(metrics, health)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in config.ADMIN_USER_IDS:
                try:
                    await bot.send_message(admin_id, report, parse_mode="HTML")
                    logger.info(f"Daily report sent to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Failed to send report to admin {admin_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to send daily report: {e}")
            return False
    
    def _format_daily_report(self, metrics: Dict[str, Any], health: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = metrics.get('stats', {})
        alerts = metrics.get('alerts', [])
        
        report = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {datetime.now().strftime('%d.%m.%Y')}</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
        report += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats.get('completed_users', 0)}\n"
        report += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats.get('conversion_rate', 0):.1f}%\n"
        report += f"‚Ä¢ –ó–∞ 24—á: {stats.get('users_last_24h', 0)} –Ω–æ–≤—ã—Ö\n\n"
        
        # –ü—Ä–æ–º–æ–∫–æ–¥—ã
        report += f"üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
        report += f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {stats.get('promo_codes_issued', 0)}\n"
        report += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats.get('available_promos', 0)}\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        report += f"üîß <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        report += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if health['database'] else '‚ùå'}\n"
        report += f"‚Ä¢ Google Sheets: {'‚úÖ' if health['google_sheets'] else '‚ùå'}\n\n"
        
        # –ê–ª–µ—Ä—Ç—ã
        if alerts:
            report += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
            for alert in alerts:
                report += f"‚Ä¢ {alert}\n"
        else:
            report += f"‚úÖ <b>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>\n"
        
        return report
    
    async def start_monitoring(self, bot):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç Starting monitoring system...")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = await self.check_metrics()
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                critical_alerts = [alert for alert in metrics['alerts'] if '‚ùå' in alert]
                if critical_alerts:
                    for admin_id in config.ADMIN_USER_IDS:
                        try:
                            await bot.send_message(
                                admin_id, 
                                f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç!</b>\n\n" + "\n".join(critical_alerts),
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            logger.error(f"Failed to send critical alert to admin {admin_id}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
                now = datetime.now()
                if now.hour == 9 and now.minute < 30:
                    await self.send_daily_report(bot)
                
            except Exception as e:
                logger.error(f"Monitoring error: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
monitoring = MonitoringSystem()
