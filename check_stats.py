#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import asyncpg
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

async def check_stats():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await conn.fetchval('SELECT COUNT(*) FROM users')
        completed_users = await conn.fetchval('SELECT COUNT(*) FROM users WHERE completed_at IS NOT NULL')
        incomplete_users = total_users - completed_users
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        conversion = (completed_users / total_users * 100) if total_users > 0 else 0
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}")
        print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {completed_users}")
        print(f"   ‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {incomplete_users}")
        print(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        new_users_24h = await conn.fetchval('''
            SELECT COUNT(*) FROM users WHERE created_at >= $1
        ''', yesterday)
        
        completed_24h = await conn.fetchval('''
            SELECT COUNT(*) FROM users WHERE completed_at >= $1
        ''', yesterday)
        
        print(f"\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
        print(f"   ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users_24h}")
        print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {completed_24h}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promo_issued = await conn.fetchval('SELECT COUNT(*) FROM users WHERE promo_code IS NOT NULL')
        
        print(f"\nüéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã:")
        print(f"   ‚Ä¢ –í—ã–¥–∞–Ω–æ: {promo_issued}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await conn.fetch('''
            SELECT user_id, email, created_at, completed_at, promo_code 
            FROM users 
            ORDER BY created_at DESC
        ''')
        
        print(f"\nüë• –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("=" * 80)
        for user in users:
            status = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' if user['completed_at'] else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            date = user['created_at'].strftime('%d.%m %H:%M')
            email = user['email'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
            promo = user['promo_code'] or '–Ω–µ—Ç'
            print(f'ID: {user["user_id"]} | {email} | {status} | {date} | –ü—Ä–æ–º–æ: {promo}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        total_reminders = await conn.fetchval('SELECT COUNT(*) FROM user_reminders')
        print(f"\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_reminders}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_stats())
