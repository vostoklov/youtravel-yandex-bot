"""
YouTravel √ó –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è Telegram Bot
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from datetime import datetime

import config
from database import db
from sheets import sheets
from keyboards import get_main_menu, get_confirmation_keyboard, remove_keyboard, get_support_keyboard
from utils import validate_email, normalize_email, validate_inn, normalize_inn, mask_email, mask_inn
from monitoring import monitoring
from reminders import reminders

# Logging
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FSM States
class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_inn = State()
    waiting_for_confirmation = State()

class SupportStates(StatesGroup):
    waiting_for_support_message = State()

# Bot and Dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# ============================================================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–ü–ï–†–í–´–ú–ò!)
# ============================================================================

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    logger.info("üîß Admin command received!")
    user_id = message.from_user.id
    logger.info(f"üîß User ID: {user_id}")
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_stats()
    
    await message.answer(
        f"üë®‚Äçüíº <b>–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_users']}\n"
        f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']:.1f}%\n"
        f"‚Ä¢ –í—ã–¥–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['promo_codes_issued']}\n\n"
        f"üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚Ä¢ /admin_users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ /admin_reset user_id - —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ /admin_promos - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n"
        f"‚Ä¢ /admin_monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
        f"‚Ä¢ /admin_reminders - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        f"‚Ä¢ /admin_message user_id —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"‚Ä¢ /admin_reply user_id —Ç–µ–∫—Å—Ç - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        parse_mode="HTML"
    )

@dp.message(Command("admin_stats"))
async def cmd_admin_stats(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    logger.info("üîß Admin_stats command received!")
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_detailed_stats()
    
    await message.answer(
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats['completed_users']}\n"
        f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['in_progress_users']}\n"
        f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']:.1f}%\n\n"
        f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_last_24h']}\n"
        f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats['completed_last_24h']}\n\n"
        f"üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
        f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {stats['promo_codes_issued']}\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats['available_promos']}",
        parse_mode="HTML"
    )

@dp.message(Command("admin_users"))
async def cmd_admin_users(message: Message):
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_recent_users(limit=10)
    
    if not users:
        await message.answer("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for user in users:
        status = "‚úÖ" if user['completed_at'] else "‚è≥"
        date = user['created_at'].strftime("%d.%m %H:%M")
        username = f" @{user['telegram_username']}" if user['telegram_username'] else ""
        text += f"{status} ID: {user['user_id']}{username}\n"
        if user['email']:
            text += f"   üìß {mask_email(user['email'])}\n"
        if user['inn']:
            text += f"   üè¢ {mask_inn(user['inn'])}\n"
        if user['promo_code']:
            text += f"   üéüÔ∏è {user['promo_code']}\n"
        text += f"   üìÖ {date}\n\n"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("admin_reset"))
async def cmd_admin_reset(message: Message):
    """–°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /admin_reset <target_user_id>
    try:
        target_user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_reset user_id"
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await db.delete_user(target_user_id)
    
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Å–±—Ä–æ—à–µ–Ω.")
        logger.info(f"Admin {user_id} reset user {target_user_id}")
    else:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("admin_promos"))
async def cmd_admin_promos(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        available_promos = sheets.get_available_promo_codes()
        
        await message.answer(
            f"üéüÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(available_promos)}\n\n"
            f"–ü–µ—Ä–≤—ã–µ 5:\n" + "\n".join(available_promos[:5]),
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")

@dp.message(Command("admin_monitor"))
async def cmd_admin_monitor(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health = await monitoring.check_system_health()
        metrics = await monitoring.check_metrics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        report += f"üîß <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        report += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if health['database'] else '‚ùå'}\n"
        report += f"‚Ä¢ Google Sheets: {'‚úÖ' if health['google_sheets'] else '‚ùå'}\n"
        report += f"‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã: {health['promo_codes']}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        stats = metrics.get('stats', {})
        report += f"üìä <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n"
        report += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        report += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats.get('conversion_rate', 0):.1f}%\n"
        report += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats.get('available_promos', 0)}\n\n"
        
        # –ê–ª–µ—Ä—Ç—ã
        alerts = metrics.get('alerts', [])
        if alerts:
            report += f"‚ö†Ô∏è <b>–ê–ª–µ—Ä—Ç—ã:</b>\n"
            for alert in alerts:
                report += f"‚Ä¢ {alert}\n"
        else:
            report += f"‚úÖ <b>–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ</b>\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

@dp.message(Command("admin_reminders"))
async def cmd_admin_reminders(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        async with db.pool.acquire() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_reminders (
                    user_id BIGINT,
                    reminder_type TEXT,
                    sent_at TIMESTAMP DEFAULT NOW(),
                    PRIMARY KEY (user_id, reminder_type)
                )
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            total_reminders = await conn.fetchval("SELECT COUNT(*) FROM user_reminders")
            incomplete_users = await conn.fetchval("""
                SELECT COUNT(*) FROM users WHERE completed_at IS NULL
            """)
            
            # –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
            incomplete_details = await conn.fetch("""
                SELECT user_id, email, step, created_at, telegram_username
                FROM users 
                WHERE completed_at IS NULL
                ORDER BY created_at DESC
            """)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"Found {len(incomplete_details)} incomplete registrations")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            recent_reminders = await conn.fetch("""
                SELECT user_id, reminder_type, sent_at 
                FROM user_reminders 
                ORDER BY sent_at DESC 
                LIMIT 5
            """)
        
        report = f"üîî <b>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        report += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_reminders}\n"
        report += f"‚Ä¢ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {incomplete_users}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        if incomplete_details:
            report += f"‚è≥ <b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
            for user in incomplete_details:
                date = user['created_at'].strftime('%d.%m %H:%M')
                username = f"@{user['telegram_username']}" if user['telegram_username'] else "–±–µ–∑ username"
                email = mask_email(user['email']) if user['email'] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                step_names = {
                    'start': '–Ω–∞—á–∞–ª–æ',
                    'email': '–≤–≤–æ–¥ email',
                    'inn': '–≤–≤–æ–¥ –ò–ù–ù',
                    'confirmation': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
                }
                step_name = step_names.get(user['step'], user['step'])
                report += f"‚Ä¢ ID: {user['user_id']} ({username})\n"
                report += f"  üìß {email}\n"
                report += f"  üìç –≠—Ç–∞–ø: {step_name}\n"
                report += f"  üìÖ {date}\n\n"
        else:
            report += f"‚úÖ <b>–í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</b>\n\n"
        
        if recent_reminders:
            report += f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
            for reminder in recent_reminders:
                date = reminder['sent_at'].strftime('%d.%m %H:%M')
                report += f"‚Ä¢ {reminder['reminder_type']} ‚Üí {reminder['user_id']} ({date})\n"
        else:
            report += f"üìù <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> –ü–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å\n"
        
        report += f"\n‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n"
        report += f"‚Ä¢ –ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞\n"
        report += f"‚Ä¢ –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n"
        report += f"‚Ä¢ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è\n"
        report += f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π\n"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


@dp.message(Command("admin_message"))
async def cmd_admin_message(message: Message):
    """–ê–¥–º–∏–Ω: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /admin_message user_id —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_message user_id —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_message 229392200 –ü—Ä–∏–≤–µ—Ç! –ó–∞–≤–µ—Ä—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )
            return
        
        user_id = int(parts[1])
        text = parts[2]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(user_id, text, parse_mode="HTML")
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"Error sending admin message: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@dp.message(Command("admin_reply"))
async def cmd_admin_reply(message: Message):
    """–ê–¥–º–∏–Ω: –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /admin_reply user_id —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_reply user_id —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_reply 229392200 –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º."
            )
            return
        
        user_id = int(parts[1])
        reply_text = parts[2]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_reply = f"""
üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

{reply_text}

---
üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ YouTravel √ó –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
"""
        
        await bot.send_message(user_id, support_reply, parse_mode="HTML")
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"Error sending admin reply: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


# ============================================================================
# –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ
# ============================================================================

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    
    if user and user.get('completed_at'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        promo_code = user.get('promo_code')
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
            f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö\n"
            f"üéüÔ∏è –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
            f"üìã –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É 10% (–¥–æ 10 000 ‚ÇΩ) –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await db.create_user(user_id, username)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await reminders.send_new_user_notification(user_id, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ <b>B2B –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</b>.\n\n"
        "üéÅ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>‚àí10% (–¥–æ 10 000 ‚ÇΩ)</b> "
        "–Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
        "üìù –î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ YouTravel:",
        reply_markup=remove_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_email)
    logger.info(f"User {user_id} started registration")

@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@dp.message(Command("status"))
@dp.message(F.text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_menu()
        )
        return
    
    if user.get('completed_at'):
        completed_date = user['completed_at'].strftime("%d.%m.%Y %H:%M")
        await message.answer(
            f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìß Email: {mask_email(user['email'])}\n"
            f"üè¢ –ò–ù–ù: {mask_inn(user['inn'])}\n"
            f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: <code>{user['promo_code']}</code>\n"
            f"üìÖ –î–∞—Ç–∞: {completed_date}\n\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É 10% (–¥–æ 10 000 ‚ÇΩ) –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        step_names = {
            'email': 'üìß –í–≤–æ–¥ email',
            'inn': 'üè¢ –í–≤–æ–¥ –ò–ù–ù',
            'confirmation': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
        }
        current_step = step_names.get(user.get('step', 'start'), '–ù–∞—á–∞–ª–æ')
        
        await message.answer(
            f"‚è≥ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìç –¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

@dp.message(Command("help"))
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ B2B –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ email –æ—Ç YouTravel\n"
        "2Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
        "üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await message.answer(
        f"üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        f"üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n"
        f"üë§ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @maria_youtravel –Ω–∞–ø—Ä—è–º—É—é",
        reply_markup=get_support_keyboard(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def start_support_chat(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    await message.answer(
        "üìù <b>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!\n\n"
        "üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å.",
        reply_markup=remove_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(SupportStates.waiting_for_support_message)
    logger.info(f"User {message.from_user.id} started support chat")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@dp.message(F.text.in_(["üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
async def handle_support_menu_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if message.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É":
        await start_support_chat(message, state)
    elif message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await cmd_support(message)

@dp.message(SupportStates.waiting_for_support_message)
async def process_support_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user_id = message.from_user.id
    username = message.from_user.username
    user_text = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    support_message = f"""
üÜò <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}
üìù <b>Username:</b> @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{user_text}

üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in config.ADMIN_USER_IDS:
        try:
            await bot.send_message(admin_id, support_message, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error sending support message to admin {admin_id}: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "‚è∞ –û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    await state.clear()
    logger.info(f"Support message from user {user_id} sent to admins")

@dp.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not is_admin(user_id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @maria_youtravel –¥–ª—è –ø–æ–º–æ—â–∏."
        )
        return
    
    logger.info(f"Admin {user_id} requested reset")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user(user_id)
        
        if not user:
            logger.info(f"User {user_id} not found in database (nothing to reset)")
            await message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=remove_keyboard(),
                parse_mode="HTML"
            )
            return
        
        logger.info(f"Deleting user {user_id} from database...")
        
        async with db.pool.acquire() as conn:
            result = await conn.execute(
                "DELETE FROM users WHERE user_id = $1",
                user_id
            )
        
        logger.info(f"‚úì User {user_id} deleted: {result}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        logger.info(f"‚úì FSM state cleared for user {user_id}")
        
        await message.answer(
            "üîÑ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=remove_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"‚úÖ User {user_id} reset successful")
        
    except Exception as e:
        logger.error(f"‚ùå Error resetting user {user_id}: {type(e).__name__}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
            f"–û—à–∏–±–∫–∞: {type(e).__name__}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @maria_youtravel",
            reply_markup=get_main_menu()
        )

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 1: EMAIL
# ============================================================================

@dp.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    email = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate_email(email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    email = normalize_email(email)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ YouTravel
    if not sheets.check_email_exists(email):
        await message.answer(
            f"‚ùå Email <code>{email}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ YouTravel.\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
            f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ YouTravel.me\n"
            f"‚Ä¢ –í–≤–µ–ª–∏ email –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @maria_youtravel",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    await db.update_user(user_id, email=email, step='inn')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(
        f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        f"üìã <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>\n"
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ B2B –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n"
        f"üîó https://passport.yandex.ru/auth/reg/org?origin=travel_unmanaged&retpath=https://id.yandex.ru/org/members\n\n"
        f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ <b>–ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b> (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_inn)
    logger.info(f"User {user_id} confirmed email: {mask_email(email)}")

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 2: –ò–ù–ù
# ============================================================================

@dp.message(RegistrationStates.waiting_for_inn)
async def process_inn(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù"""
    inn = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate_inn(inn):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.\n\n"
            "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    inn = normalize_inn(inn)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if await db.check_inn_exists(inn):
        await message.answer(
            f"‚ùå –ò–ù–ù <code>{mask_inn(inn)}</code> —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"–ö–∞–∂–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
            f"–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @maria_youtravel",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(inn=inn)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    email = user.get('email')
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üìß Email: <code>{email}</code>\n"
        f"üè¢ –ò–ù–ù: <code>{inn}</code>\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_confirmation)
    logger.info(f"User {user_id} entered INN: {mask_inn(inn)}")

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 3: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
# ============================================================================

@dp.callback_query(F.data == "confirm_yes", RegistrationStates.waiting_for_confirmation)
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    inn = data.get('inn')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = sheets.get_available_promo()
    
    if not promo_code:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @maria_youtravel",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await db.update_user(
        user_id,
        inn=inn,
        promo_code=promo_code,
        step='completed',
        completed_at=datetime.now()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    await callback.message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üéüÔ∏è –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É <b>‚àí10% (–¥–æ 10 000 ‚ÇΩ)</b> –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.\n\n"
        f"üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n"
        f"https://travel.yandex.ru/b2b\n\n"
        f"‚úàÔ∏è –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await reminders.send_completion_notification(user_id, user['email'], promo_code)
    
    await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"User {user_id} completed registration with promo: {promo_code}")

@dp.callback_query(F.data == "confirm_no", RegistrationStates.waiting_for_confirmation)
async def reject_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
    await callback.message.edit_text(
        "üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç YouTravel:"
    )
    
    await state.set_state(RegistrationStates.waiting_for_email)
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞")
    logger.info(f"User {callback.from_user.id} restarted registration")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================

@dp.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    support_keywords = ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–ø—Ä–æ–±–ª–µ–º–∞', '–≤–æ–ø—Ä–æ—Å', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ']
    if any(keyword in text for keyword in support_keywords):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        await message.answer(
            "üí¨ <b>–ü–æ—Ö–æ–∂–µ, –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!</b>\n\n"
            "–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_support_keyboard(),
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_menu()
    )

# ============================================================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
# ============================================================================

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    logger.info(f"üîç Checking admin for user {user_id}, admin IDs: {config.ADMIN_USER_IDS}")
    result = user_id in config.ADMIN_USER_IDS
    logger.info(f"üîç Admin check result: {result}")
    return result

# –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await db.connect()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        sheets.connect()
        
        logger.info("ü§ñ Bot started with admin panel")
        logger.info(f"üîß Admin IDs: {config.ADMIN_USER_IDS}")
        logger.info(f"üîß Admin IDs type: {type(config.ADMIN_USER_IDS)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        monitoring_task = asyncio.create_task(monitoring.start_monitoring(bot))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        reminders_task = asyncio.create_task(reminders.start_reminders(bot))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if 'monitoring_task' in locals():
            monitoring_task.cancel()
        await db.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

# Force restart
