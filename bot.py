"""
YouTravel √ó –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è Telegram Bot
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from datetime import datetime

import config
from database import db
from sheets import sheets
from keyboards import get_main_menu, get_confirmation_keyboard, remove_keyboard
from utils import validate_email, normalize_email, validate_inn, normalize_inn, mask_email, mask_inn

# Logging
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FSM States
class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_inn = State()
    waiting_for_confirmation = State()

# Bot and Dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# ============================================================================
# –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ
# ============================================================================

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    
    if user and user.get('completed_at'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        promo_code = user.get('promo_code')
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
            f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö\n"
            f"üéüÔ∏è –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
            f"üìã –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É 10% (–¥–æ 10 000 ‚ÇΩ) –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await db.create_user(user_id, username)
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ <b>B2B –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</b>.\n\n"
        "üéÅ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>‚àí10% (–¥–æ 10 000 ‚ÇΩ)</b> "
        "–Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
        "üìù –î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ YouTravel:",
        reply_markup=remove_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_email)
    logger.info(f"User {user_id} started registration")

@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@dp.message(Command("status"))
@dp.message(F.text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_menu()
        )
        return
    
    if user.get('completed_at'):
        completed_date = user['completed_at'].strftime("%d.%m.%Y %H:%M")
        await message.answer(
            f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìß Email: {mask_email(user['email'])}\n"
            f"üè¢ –ò–ù–ù: {mask_inn(user['inn'])}\n"
            f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: <code>{user['promo_code']}</code>\n"
            f"üìÖ –î–∞—Ç–∞: {completed_date}\n\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É 10% (–¥–æ 10 000 ‚ÇΩ) –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        step_names = {
            'email': 'üìß –í–≤–æ–¥ email',
            'inn': 'üè¢ –í–≤–æ–¥ –ò–ù–ù',
            'confirmation': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
        }
        current_step = step_names.get(user.get('step', 'start'), '–ù–∞—á–∞–ª–æ')
        
        await message.answer(
            f"‚è≥ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìç –¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

@dp.message(Command("help"))
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ B2B –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ email –æ—Ç YouTravel\n"
        "2Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
        "üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await message.answer(
        f"üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        f"üë§ @{config.SUPPORT_USERNAME}",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 1: EMAIL
# ============================================================================

@dp.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    email = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate_email(email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    email = normalize_email(email)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ YouTravel
    if not sheets.check_email_exists(email):
        await message.answer(
            f"‚ùå Email <code>{email}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ YouTravel.\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n"
            f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ YouTravel.me\n"
            f"‚Ä¢ –í–≤–µ–ª–∏ email –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{config.SUPPORT_USERNAME}",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    await db.update_user(user_id, email=email, step='inn')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(
        f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        f"üìã <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>\n"
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ B2B –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n"
        f"üîó https://passport.yandex.ru/auth/reg/org?origin=travel_unmanaged&retpath=https://id.yandex.ru/org/members\n\n"
        f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ <b>–ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b> (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_inn)
    logger.info(f"User {user_id} confirmed email: {mask_email(email)}")

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 2: –ò–ù–ù
# ============================================================================

@dp.message(RegistrationStates.waiting_for_inn)
async def process_inn(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù"""
    inn = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate_inn(inn):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.\n\n"
            "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    inn = normalize_inn(inn)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if await db.check_inn_exists(inn):
        await message.answer(
            f"‚ùå –ò–ù–ù <code>{mask_inn(inn)}</code> —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"–ö–∞–∂–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
            f"–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{config.SUPPORT_USERNAME}",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(inn=inn)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    email = user.get('email')
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üìß Email: <code>{email}</code>\n"
        f"üè¢ –ò–ù–ù: <code>{inn}</code>\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_confirmation)
    logger.info(f"User {user_id} entered INN: {mask_inn(inn)}")

# ============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø - –®–ê–ì 3: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
# ============================================================================

@dp.callback_query(F.data == "confirm_yes", RegistrationStates.waiting_for_confirmation)
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    inn = data.get('inn')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = sheets.get_available_promo()
    
    if not promo_code:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{config.SUPPORT_USERNAME}",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await db.update_user(
        user_id,
        inn=inn,
        promo_code=promo_code,
        step='completed',
        completed_at=datetime.now()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    await callback.message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üéüÔ∏è –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç —Å–∫–∏–¥–∫—É <b>‚àí10% (–¥–æ 10 000 ‚ÇΩ)</b> –Ω–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.\n\n"
        f"üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n"
        f"https://travel.yandex.ru/b2b\n\n"
        f"‚úàÔ∏è –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    
    await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"User {user_id} completed registration with promo: {promo_code}")

@dp.callback_query(F.data == "confirm_no", RegistrationStates.waiting_for_confirmation)
async def reject_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
    await callback.message.edit_text(
        "üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç YouTravel:"
    )
    
    await state.set_state(RegistrationStates.waiting_for_email)
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞")
    logger.info(f"User {callback.from_user.id} restarted registration")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================

@dp.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_menu()
    )

# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await db.connect()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        sheets.connect()
        
        logger.info("ü§ñ Bot started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        await db.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

