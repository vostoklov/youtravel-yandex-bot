#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—ã–¥–∞—á–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
"""
import os
import sys
import asyncio
import asyncpg
import config
from datetime import datetime

async def analyze_issue():
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã"""
    try:
        pool = await asyncpg.create_pool(
            dsn=config.DATABASE_URL,
            min_size=1,
            max_size=3
        )
        
        async with pool.acquire() as conn:
            print("\n" + "="*60)
            print("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–û–ú–û–ö–û–î–ê–ú–ò")
            print("="*60)
            
            # 1. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
            print("\n1Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ó–ê–í–ï–†–®–ï–ù–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ï–ô:")
            completed_users = await conn.fetch(
                """SELECT user_id, email, inn, promo_code, 
                          created_at, completed_at 
                   FROM users 
                   WHERE step = 'completed'
                   ORDER BY completed_at DESC"""
            )
            
            if completed_users:
                for user in completed_users:
                    print(f"\nüë§ User ID: {user['user_id']}")
                    print(f"   üìß Email: {user['email']}")
                    print(f"   üè¢ INN: {user['inn']}")
                    print(f"   üéüÔ∏è Promo: {user['promo_code']}")
                    print(f"   üìÖ Started: {user['created_at']}")
                    print(f"   ‚úÖ Completed: {user['completed_at']}")
            else:
                print("   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
            
            # 2. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å email nzamaldinova@gmail.com
            print("\n2Ô∏è‚É£ –í–°–ï –ó–ê–ü–ò–°–ò –î–õ–Ø nzamaldinova@gmail.com:")
            nz_users = await conn.fetch(
                """SELECT * FROM users 
                   WHERE email = 'nzamaldinova@gmail.com'
                   ORDER BY created_at"""
            )
            
            if nz_users:
                for i, user in enumerate(nz_users, 1):
                    print(f"\n   –ó–∞–ø–∏—Å—å #{i}:")
                    print(f"   üë§ User ID: {user['user_id']}")
                    print(f"   üìß Email: {user['email']}")
                    print(f"   üè¢ INN: {user['inn']}")
                    print(f"   üéüÔ∏è Promo: {user['promo_code']}")
                    print(f"   üìç Step: {user['step']}")
                    print(f"   üìÖ Created: {user['created_at']}")
                    print(f"   ‚úÖ Completed: {user['completed_at']}")
            else:
                print("   ‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # 3. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
            print("\n3Ô∏è‚É£ –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–†–û–ú–û–ö–û–î–ê–ú–ò:")
            users_with_promos = await conn.fetch(
                """SELECT user_id, email, promo_code, completed_at 
                   FROM users 
                   WHERE promo_code IS NOT NULL
                   ORDER BY completed_at DESC"""
            )
            
            promo_count = {}
            for user in users_with_promos:
                promo = user['promo_code']
                if promo in promo_count:
                    promo_count[promo] += 1
                else:
                    promo_count[promo] = 1
                print(f"   üéüÔ∏è {promo} ‚Üí User {user['user_id']} ({user['email']})")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            print("\n4Ô∏è‚É£ –î–£–ë–õ–ò–ö–ê–¢–´ –ü–†–û–ú–û–ö–û–î–û–í –í –ë–î:")
            duplicates = [promo for promo, count in promo_count.items() if count > 1]
            if duplicates:
                for promo in duplicates:
                    print(f"   ‚ö†Ô∏è {promo} –≤—ã–¥–∞–Ω {promo_count[promo]} —Ä–∞–∑(–∞)!")
            else:
                print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n5Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            total_users = await conn.fetchval('SELECT COUNT(*) FROM users')
            completed = await conn.fetchval(
                "SELECT COUNT(*) FROM users WHERE step = 'completed'"
            )
            with_promos = await conn.fetchval(
                "SELECT COUNT(*) FROM users WHERE promo_code IS NOT NULL"
            )
            
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {completed}")
            print(f"   ‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã: {with_promos}")
            
            # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\n" + "="*60)
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("="*60)
            
            if len(nz_users) > 1:
                print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(nz_users)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è nzamaldinova@gmail.com")
                print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–≤—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º")
                print("   –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ")
            
            promos_to_restore = [
                'YOUTRAVELCME4IAZJU6',
                'YOUTRAVELOZ3DZVJ7NQ', 
                'YOUTRAVELJFUHCYBOZT',
                'YOUTRAVELBRGJJ77O22',
                'YOUTRAVELOB4VD2YBL7',
                'YOUTRAVELBVHEW48XL7',
                'YOUTRAVELPXP5N77LH7',
                'YOUTRAVELLBXZL6T3G3'
            ]
            
            print(f"\nüìã –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Google Sheets:")
            for promo in promos_to_restore:
                print(f"   ‚Ä¢ {promo} ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å 'available'")
            
            print("\n" + "="*60)
        
        await pool.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(analyze_issue())

