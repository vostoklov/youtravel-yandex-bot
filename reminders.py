"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List
import config
from database import db

logger = logging.getLogger(__name__)

class ReminderSystem:
    def __init__(self):
        self.bot = None
        self.reminder_intervals = {
            'incomplete_1h': 60,      # 1 —á–∞—Å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
            'incomplete_24h': 1440,   # 24 —á–∞—Å–∞
            'incomplete_3d': 4320,    # 3 –¥–Ω—è
            'promo_reminder': 10080,  # 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        }
    
    async def start_reminders(self, bot):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.bot = bot
        logger.info("üîî Starting reminder system...")
        
        while True:
            try:
                await self.check_incomplete_registrations()
                await self.check_promo_reminders()
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"Reminder system error: {e}")
                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def check_incomplete_registrations(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
            incomplete_users = await self.get_incomplete_users()
            
            for user in incomplete_users:
                await self.send_reminder_if_needed(user)
                
        except Exception as e:
            logger.error(f"Error checking incomplete registrations: {e}")
    
    async def get_incomplete_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            async with db.pool.acquire() as conn:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ completed_at
                rows = await conn.fetch("""
                    SELECT user_id, email, step, created_at, completed_at
                    FROM users 
                    WHERE completed_at IS NULL
                    ORDER BY created_at DESC
                """)
                
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"Error getting incomplete users: {e}")
            return []
    
    async def send_reminder_if_needed(self, user: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            user_id = user['user_id']
            created_at = user['created_at']
            step = user['step']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            time_since_creation = datetime.now() - created_at
            minutes_since = int(time_since_creation.total_seconds() / 60)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ)
            reminder_type = None
            if minutes_since >= self.reminder_intervals['incomplete_3d']:
                reminder_type = 'incomplete_3d'
            elif minutes_since >= self.reminder_intervals['incomplete_24h']:
                reminder_type = 'incomplete_24h'
            elif minutes_since >= self.reminder_intervals['incomplete_1h']:
                reminder_type = 'incomplete_1h'
            
            if reminder_type:
                await self.send_reminder(user_id, reminder_type, step)
                
        except Exception as e:
            logger.error(f"Error sending reminder to user {user.get('user_id')}: {e}")
    
    async def send_reminder(self, user_id: int, reminder_type: str, step: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if await self.reminder_already_sent(user_id, reminder_type):
                return
            
            message = self.get_reminder_message(reminder_type, step)
            
            if message:
                await self.bot.send_message(user_id, message, parse_mode="HTML")
                await self.mark_reminder_sent(user_id, reminder_type)
                logger.info(f"Reminder {reminder_type} sent to user {user_id}")
                
        except Exception as e:
            if "chat not found" in str(e) or "bot was blocked" in str(e):
                logger.warning(f"User {user_id} blocked the bot or chat not found - skipping reminder")
                # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                await self.mark_reminder_sent(user_id, reminder_type)
            else:
                logger.error(f"Error sending reminder to user {user_id}: {e}")
    
    def get_reminder_message(self, reminder_type: str, step: str) -> str:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        messages = {
            'incomplete_1h': {
                'email': """
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ YouTravel √ó –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏.

üí° –ó–∞–≤–µ—Ä—à–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ‚àí10% –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö —Ç—É—Ä–æ–≤.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
                """,
                'inn': """
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö, –Ω–æ –Ω–µ –≤–≤–µ–ª–∏ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.

üíº –£–∫–∞–∂–∏—Ç–µ –ò–ù–ù, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É ‚àí10% –Ω–∞ –æ—Ç–µ–ª–∏.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
                """,
                'confirmation': """
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ.

‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ‚àí10% –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–µ–π—á–∞—Å.
                """
            },
            'incomplete_24h': {
                'email': """
üîÑ <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

–û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚àí10% –Ω–∞ –æ—Ç–µ–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.

üìß –£–∫–∞–∂–∏—Ç–µ email –æ—Ç YouTravel, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
                """,
                'inn': """
üîÑ <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

–û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚àí10% –Ω–∞ –æ—Ç–µ–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.

üíº –£–∫–∞–∂–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
                """,
                'confirmation': """
üîÑ <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

–û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚àí10% –Ω–∞ –æ—Ç–µ–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.

‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫—É.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
                """
            },
            'incomplete_3d': {
                'email': """
üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>

–í—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚àí10% –¥–æ 10 000 ‚ÇΩ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π –¥–ª—è —Å–≤–æ–∏—Ö —Ç—É—Ä–æ–≤.

‚è≥ –û—Ñ–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 5 –Ω–æ—è–±—Ä—è.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–µ–π—á–∞—Å.
                """,
                'inn': """
üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>

–í—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚àí10% –¥–æ 10 000 ‚ÇΩ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π –¥–ª—è —Å–≤–æ–∏—Ö —Ç—É—Ä–æ–≤.

‚è≥ –û—Ñ–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 5 –Ω–æ—è–±—Ä—è.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–µ–π—á–∞—Å.
                """,
                'confirmation': """
üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>

–í—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚àí10% –¥–æ 10 000 ‚ÇΩ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π –¥–ª—è —Å–≤–æ–∏—Ö —Ç—É—Ä–æ–≤.

‚è≥ –û—Ñ–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 5 –Ω–æ—è–±—Ä—è.

üëâ –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–µ–π—á–∞—Å.
                """
            }
        }
        
        return messages.get(reminder_type, {}).get(step, "")
    
    async def check_promo_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            seven_days_ago = datetime.now() - timedelta(days=7)
            
            async with db.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º—É –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                rows = await conn.fetch("""
                    SELECT u.user_id, u.promo_code, u.completed_at
                    FROM users u
                    LEFT JOIN user_reminders ur ON u.user_id = ur.user_id AND ur.reminder_type = 'promo_reminder'
                    WHERE u.completed_at IS NOT NULL 
                    AND u.promo_code IS NOT NULL
                    AND u.completed_at <= $1
                    AND ur.user_id IS NULL
                """, seven_days_ago)
                
                for row in rows:
                    await self.send_promo_reminder(row['user_id'], row['promo_code'])
                    await self.mark_reminder_sent(row['user_id'], 'promo_reminder')
                    
        except Exception as e:
            logger.error(f"Error checking promo reminders: {e}")
    
    async def send_promo_reminder(self, user_id: int, promo_code: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ"""
        try:
            message = f"""
üéüÔ∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}!</b>

üí° –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ—Ç–µ–ª–µ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 10 000 ‚ÇΩ.

‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 5 –Ω–æ—è–±—Ä—è, —É—Å–ø–µ–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!

üìû –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
            """
            
            await self.bot.send_message(user_id, message, parse_mode="HTML")
            logger.info(f"Promo reminder sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending promo reminder to user {user_id}: {e}")
    
    async def reminder_already_sent(self, user_id: int, reminder_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            async with db.pool.acquire() as conn:
                result = await conn.fetchval("""
                    SELECT 1 FROM user_reminders 
                    WHERE user_id = $1 AND reminder_type = $2
                """, user_id, reminder_type)
                
                return result is not None
                
        except Exception as e:
            logger.error(f"Error checking reminder status: {e}")
            return False
    
    async def mark_reminder_sent(self, user_id: int, reminder_type: str):
        """–û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        try:
            async with db.pool.acquire() as conn:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_reminders (
                        user_id BIGINT,
                        reminder_type TEXT,
                        sent_at TIMESTAMP DEFAULT NOW(),
                        PRIMARY KEY (user_id, reminder_type)
                    )
                """)
                
                await conn.execute("""
                    INSERT INTO user_reminders (user_id, reminder_type) 
                    VALUES ($1, $2)
                    ON CONFLICT (user_id, reminder_type) DO NOTHING
                """, user_id, reminder_type)
                
        except Exception as e:
            logger.error(f"Error marking reminder as sent: {e}")
    
    async def send_new_user_notification(self, user_id: int, email: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            message = f"""
üë§ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

ID: {user_id}
Email: {email}
–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /admin_stats
            """
            
            for admin_id in config.ADMIN_USER_IDS:
                try:
                    await self.bot.send_message(admin_id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Failed to send new user notification to admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error sending new user notification: {e}")
    
    async def send_completion_notification(self, user_id: int, email: str, promo_code: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            message = f"""
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

ID: {user_id}
Email: {email}
–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}
–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /admin_stats
            """
            
            for admin_id in config.ADMIN_USER_IDS:
                try:
                    await self.bot.send_message(admin_id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Failed to send completion notification to admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error sending completion notification: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
reminders = ReminderSystem()
